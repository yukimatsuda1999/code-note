library(tidyverse)
library(org.Hs.eg.db)
library(org.Gg.eg.db)
install.packages("org.Hs.eg.db")
library(org.Gg.eg.db)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
BiocManager::install("org.Hs.eg.db")
library(topGO)
columns(org.Hs.eg.db)
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
mapped_genes <- mappedkeys(org.Hs.egGENENAME)
mapped_genes <- mappedkeys(org.Hs.egENSEMBL)
mapped_genes
columns(org.Hs.eg.db)
mapped_genes <- mappedkeys(org.Hs.egGENENAME)
scores = runif(length(mapped_genes), 0, 1)
named_scores = setNames(scores, mapped_genes)
tg_data = new(
"topGOdata",
ontology="BP",
allGenes=named_scores,
geneSelectionFun=function(x) {x < 0.01},
nodeSize=10,
annotationFun=annFUN.org,
mapping="org.Hs.eg.db",
ID="genename"
)
tg_data = new(
"topGOdata",
ontology="BP",
allGenes=named_scores,
geneSelectionFun=function(x) {x < 0.01},
nodeSize=10,
annotationFun=annFUN.org,
mapping="org.Hs.eg.db",
ID="GENENAME"
)
mapped_genes <- mappedkeys(org.Hs.egGO)
scores = runif(length(mapped_genes), 0, 1)
named_scores = setNames(scores, mapped_genes)
tg_data = new(
"topGOdata",
ontology="BP",
allGenes=named_scores,
geneSelectionFun=function(x) {x < 0.01},
nodeSize=10,
annotationFun=annFUN.org,
mapping="org.Hs.eg.db",
ID="GENENAME"
)
tg_data = new(
"topGOdata",
ontology="BP",
allGenes=named_scores,
geneSelectionFun=function(x) {x < 0.01},
nodeSize=10,
annotationFun=annFUN.org,
mapping="org.Hs.eg.db",
ID="entrez"
)
resElimFisher = runTest(tg_data, algorithm="elim", statistic="fisher", sortOrder="increasing")
tg_table = GenTable(
tg_data,
elimFisher=resElimFisher,
topNodes=length(tg_data@graph@nodes)
) %>%
tibble::as_tibble() %>%
print()
## Bimap interface:
x <- org.Hs.egGENENAME
# Get the gene names that are mapped to an entrez gene identifier
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Get the GENE NAME for the first five genes
xx[1:5]
# Get the first one
xx[[1]]
}
if(length(xx) > 0) {
# Get the GENE NAME for the first five genes
print(xx[1:5])
}
## Bimap interface:
x <- org.Hs.egSYMBOL
# Get the gene names that are mapped to an entrez gene identifier
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Get the GENE NAME for the first five genes
print(xx[1:5])
}
sample = read_tsv("topGO/sample.tsv")
View(sample)
class(mapped_genes)
mapped_genes = sample$`Gene stable ID` %>% unique()
class(mapped_genes)
scores = runif(length(mapped_genes), 0, 1)
named_scores = setNames(scores, mapped_genes)
tg_data = new(
"topGOdata",
ontology="BP",
allGenes=named_scores,
geneSelectionFun=function(x) {x < 0.01},
nodeSize=10,
annotationFun=annFUN.org,
mapping="org.Hs.eg.db",
ID="Ensembl"
)
resElimFisher = runTest(tg_data, algorithm="elim", statistic="fisher", sortOrder="increasing")
tg_table = GenTable(
tg_data,
elimFisher=resElimFisher,
topNodes=length(tg_data@graph@nodes)
) %>%
tibble::as_tibble() %>%
print()
columns(org.Hs.eg.db)
sample = read_tsv("topGO/sample.tsv")
mapped_genes = sample$`HGNC symbol` %>% unique()
scores = runif(length(mapped_genes), 0, 1)
named_scores = setNames(scores, mapped_genes)
tg_data = new(
"topGOdata",
ontology="BP",
allGenes=named_scores,
geneSelectionFun=function(x) {x < 0.01},
nodeSize=10,
annotationFun=annFUN.org,
mapping="org.Hs.eg.db",
ID="symbol"
)
resElimFisher = runTest(tg_data, algorithm="elim", statistic="fisher", sortOrder="increasing")
tg_table = GenTable(
tg_data,
elimFisher=resElimFisher,
topNodes=length(tg_data@graph@nodes)
) %>%
tibble::as_tibble() %>%
print()
BiocManager::install("fgsea")
library(fgsea)
data(examplePathways)
data(exampleRanks)
set.seed(42)
fgseaRes <- fgsea(pathways = examplePathways,
stats    = exampleRanks,
minSize  = 15,
maxSize  = 500)
head(fgseaRes[order(pval), ])
head(examplePathways)
head(exampleRanks)
kegg_pathways = gmtPathways("GSEA/c2.cp.kegg.v2022.1.Hs.symbols.gmt")
sample = read_tsv("topGO/sample.tsv")
mapped_genes = sample$`HGNC symbol` %>% unique()
scores = runif(length(mapped_genes), 0, 1)
named_scores = setNames(scores, mapped_genes)
kegg_pathways = gmtPathways("GSEA/c2.cp.kegg.v2022.1.Hs.symbols.gmt")
fgseaRes <- fgsea(pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,
maxSize  = 500)
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 1,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
)
head(fgseaRes[order(pval), ])
library(fgsea)
sample = read_tsv("topGO/sample.tsv")
library(tidyverse)
library(fgsea)
sample = read_tsv("topGO/sample.tsv")
mapped_genes = sample$`HGNC symbol` %>% unique()
scores = runif(length(mapped_genes), 0, 1)
named_scores = setNames(scores, mapped_genes)
kegg_pathways = gmtPathways("GSEA/c2.cp.kegg.v2022.1.Hs.symbols.gmt")
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 1,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
)
head(fgseaRes[order(pval), ])
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
)
head(fgseaRes[order(pval), ])
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,  # 15
maxSize  = 500,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
)
head(fgseaRes[order(pval), ])
View(fgseaRes)
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
) %>%
arrange(pval) %>%
print()
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
) %>%
arrange(pval) %>%
print(5)
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
) %>%
arrange(pval) %>%
head(5)
fgseaRes <- fgsea(
pathways = kegg_pathways,
stats    = named_scores,
minSize  = 15,  # 15
maxSize  = length(named_scores)-1,  # 500
scoreType = "pos"  # c("std", "pos", "neg")
) %>%
arrange(pval) %>%
print()
head(fgseaRes %>% arrange(pval))
library(tidyverse)
library(fgsea)
data(exampleRanks)
exampleRanks
